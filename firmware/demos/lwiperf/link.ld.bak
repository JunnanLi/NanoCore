/*
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.
*/
OUTPUT_ARCH(riscv)
ENTRY(_start)

MEMORY {
  /* the memory in the testbench is 64k in size;
   * set LENGTH=48k and leave at least 16k for stack */
  /* mem : ORIGIN = 0x00000000, LENGTH = 0x0000c000 */
  /* the memory in the testbench is 16k in size;
   * set LENGTH=12k and leave at least 4k for stack */
  mem : ORIGIN = 0x00000000, LENGTH = 0x0040000
}

SECTIONS {
  /* we want a fixed entry point */
  PROVIDE(__boot_address = 0x180);

  /* stack and heap related settings */
  __stack_size = DEFINED(__stack_size) ? __stack_size : 0x1000;
  /* data related settings */
  __data_start = DEFINED(__data_start) ? __data_start : 0x00020000;


  /* interrupt vectors */
  .vectors (ORIGIN(mem)) :
  {
    PROVIDE(__vector_start = .);
      KEEP(*(.vectors));
  } > mem
  

  /* crt0 init code */
  .init (__boot_address) :
  {
    KEEP (*(SORT_NONE(.init)))
    KEEP (*(.text.start))
  } > mem
  
  .text :
  {
    *(.text.*);
    *(.text);
  } > mem

  .stack (__data_start) :
  {
    . = __stack_size;
    PROVIDE(_sp = .);
  } > mem

  .data : 
  {
    *(*);
    end = .;
    . = ALIGN(4);
  } > mem
}
