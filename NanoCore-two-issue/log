diff '--color=auto' -r src/global_head.svh /home/lijunnan/Documents/0-code/0-hw/ku040/pipelined-picorv32_ku040/pipelined-picorv32_ku040.srcs/sources_1/imports/rtl/global_head.svh
34,36c34,36
<   // `define XILINX_FIFO_RAM
<   `define SIM_FIFO_RAM
<   `define DATA_SRAM_noBUFFER
---
>    `define XILINX_FIFO_RAM
>   // `define SIM_FIFO_RAM
>    `define DATA_SRAM_noBUFFER
Only in src/mem_part/Cache: NanoCache_Search_1PE.sv
diff '--color=auto' -r src/mem_part/Cache/NanoCache_Search.sv /home/lijunnan/Documents/0-code/0-hw/ku040/pipelined-picorv32_ku040/pipelined-picorv32_ku040.srcs/sources_1/imports/rtl/mem_part/Cache/NanoCache_Search.sv
5c5
<  *  Last updated date:  2024.2.21.
---
>  *  Last updated date:  2024.9.1.
10a11
>  *      1) cache for instruction
13,14d13
< // `ifdef WRITE_AFTER_READ
< 
17c16,17
<   parameter RDEN_WIDTH = 1
---
>   parameter RDEN_WIDTH = 1,
>   parameter BYPASS     = 1
32d31
<   output  wire                        o_cache_rvalid_ns,
34c33
<   output  wire                        o_cache_gnt,
---
>   output  reg                         o_cache_gnt,
37,42c36,40
<   output  reg                         o_wb_wren,
<   input   wire                        i_wb_gnt,
<   output  reg                         o_miss_rden,
<   output  reg                         o_miss_wren,
<   output  reg   [31:0]                o_miss_addr,
<   output  logic [7:0][31:0]           o_miss_wdata,
---
>   output  wire                        o_miss_rden,
>   output  wire                        o_miss_wren,
>   output  wire  [31:0]                o_miss_addr,
>   output  wire  [7:0][31:0]           o_miss_wdata,
>   output  logic [7:0][ 3:0]           o_miss_wstrb,
45c43,44
<   input   wire  [7:0][31:0]           i_upd_rdata
---
>   input   wire  [7:0][31:0]           i_upd_rdata,
>   input   wire                        i_wr_finish
51,52c50,51
<   reg   [`NUM_CACHE-1:0]              r_tag_valid, r_tag_dirty;
<   reg   [`NUM_CACHE-1:0]              r_vic, r_to_wb;
---
>   reg   [`NUM_CACHE-1:0]              r_tag_valid;
>   reg   [`NUM_CACHE-1:0]              r_vic;
55,65c54
<   logic [7:0][31:0]                   l_miss_wdata;
<   logic [7:0][31:0]                   l_wb_wdata;
<   logic [15:0]                        l_wb_addr;
<   logic                               l_wait_wb;
<   reg                                 r_lock_gnt;
<   reg                                 r_re_rden, r_re_wren, r_temp_rdwr;
<   reg                                 r_wait_to_read, r_wait_to_rd_after_wr;
<   reg                                 r_upd_valid_delay;
<   logic [7:0][31:0]                   w_upd_rdata;
<   reg   [31:0]                        q_cache_wdata, q_cache_addr;
<   reg   [ 3:0]                        q_cache_wstrb;
---
>   reg   [31:0]                        q_cache_addr;
74,75c63,68
<   assign o_cache_rdata = r_cache_rdata[DATA_WIDTH-1:0]; 
<   assign o_miss_wdata = o_wb_wren? l_wb_wdata: l_miss_wdata;
---
>   assign o_cache_rdata    = r_cache_rdata[DATA_WIDTH-1:0]; 
>   assign o_miss_wdata     = {8{i_cache_wdata}};
>   assign o_miss_addr      = {5'b0,i_cache_addr[31:5]};
>   assign o_miss_wren      = i_cache_wren;
>   assign o_miss_rden      = i_cache_rden & (w_hit == 0);
> 
77,80d69
<     l_miss_wdata        = '0;
<     l_wb_wdata          = '0;
<     l_wb_addr           = '0;
<     l_wait_wb           = '0;
82,86c71,72
<       l_miss_wdata      = l_miss_wdata | {256{r_vic[i]}} & r_cached_data[i];
<       l_wb_wdata        = l_wb_wdata | {256{r_to_wb[i]}} & r_cached_data[i];
<       l_wb_addr         = l_wb_addr | {16{r_to_wb[i]}} & r_tag_addr[i];
<       l_wait_wb         = l_wait_wb | r_to_wb[i] & r_tag_dirty[i] & r_tag_valid[i];
<       w_hit[i]          = r_tag_valid[i]==1'b1 && r_tag_addr[i] == i_cache_addr[5+:16];
---
>       w_hit[i]            = r_tag_valid[i]==1'b1 & ~BYPASS &
>                             r_tag_addr[i] == i_cache_addr[5+:16];
89d74
<   logic [7:0][31:0] w_hit_data;
91,93c76,79
<     w_hit_data          = '0;
<     for(integer i=0; i<`NUM_CACHE; i=i+1) begin
<       w_hit_data        = w_hit_data | {256{w_hit[i]}} & r_cached_data[i];
---
>     o_miss_wstrb          = '0;
>     for(integer i=0; i<8; i=i+1) begin
>       if(i== i_cache_addr[2+:3])
>         o_miss_wstrb[i]   = i_cache_wstrb;
96,97c82
<   logic w_miss_tag_dirty;
<   logic [15:0]  w_miss_tag_addr;
---
>   logic [7:0][31:0] w_hit_data;
99,100c84
<     w_miss_tag_dirty    = '0;
<     w_miss_tag_addr     = '0;
---
>     w_hit_data            = '0;
102,103c86
<       w_miss_tag_dirty  = w_miss_tag_dirty | r_vic[i] & r_tag_dirty[i];
<       w_miss_tag_addr   = w_miss_tag_addr  | {16{r_vic[i]}} & r_tag_addr[i];
---
>       w_hit_data          = w_hit_data | {256{w_hit[i]}} & r_cached_data[i];
106,107d88
<   assign o_cache_gnt    = ~(o_miss_rden|o_miss_wren|r_wait_to_read) & r_lock_gnt;
<   assign o_cache_rvalid_ns = i_cache_rden & (|w_hit);
112,114c93
<       o_miss_rden             <= '0;
<       o_miss_wren             <= '0;
<       o_wb_wren               <= '0;
---
>       o_cache_gnt             <= 1'b1;
117d95
<       r_tag_dirty             <= '0;
119,127d96
<       r_to_wb                 <= 1;
< 
<       r_lock_gnt              <= 1'b1;
<       r_re_rden               <= '0;
<       r_re_wren               <= '0;
<       r_temp_rdwr             <= '0;
<       r_wait_to_read          <= '0;
<       r_wait_to_rd_after_wr   <= '0;
<       r_upd_valid_delay       <= '0;
129,133c98
<       //* serach;
<       r_upd_valid_delay       <= i_upd_valid;
<       r_lock_gnt              <=  (r_upd_valid_delay|i_flush)? 1'b1: 
<                                   (o_miss_rden|o_miss_wren)? 1'b0: r_lock_gnt;
< 
---
>       //* instr serach;
135,143c100
<       o_miss_rden             <= (i_miss_resp|i_flush)? 1'b0: o_miss_rden;
<       o_miss_wren             <= i_miss_resp? 1'b0: o_miss_wren;
<       o_miss_addr             <= i_miss_resp? {5'b0,i_cache_addr[31:5]} : o_miss_addr;
<       r_re_rden               <= 1'b0;
<       r_re_wren               <= 1'b0;
<       o_wb_wren               <= 1'b0;
<       if(i_cache_rden == 1'b1 || r_re_rden == 1'b1) 
<       begin
<         // r_vic                 <= (|w_hit)? w_hit[0]: r_vic;
---
>       if(i_cache_rden == 1'b1) begin
145d101
<           // o_cache_rvalid      <= 1'b1;
148c104
<                                   {w_hit_data[i_cache_addr[2+:3]+1],w_hit_data[i_cache_addr[2+:3]]};
---
>                     {w_hit_data[i_cache_addr[2+:3]+1],w_hit_data[i_cache_addr[2+:3]]};
152,162c108
<           r_temp_rdwr         <= 1'b1;
< 
<           o_miss_wren         <= w_miss_tag_dirty;
<           o_miss_addr         <= w_miss_tag_dirty? {16'b0,w_miss_tag_addr}: {5'b0,i_cache_addr[31:5]};
<           o_miss_rden         <= ~w_miss_tag_dirty;
<           r_wait_to_rd_after_wr  <= w_miss_tag_dirty;
<           for(integer i=0; i<`NUM_CACHE; i=i+1)
<             if(r_vic[i]) begin
<               // r_tag_addr[i]   <= i_cache_addr[5+:16];
<               r_tag_dirty[i]  <= 1'b0;
<             end
---
>           o_cache_gnt         <= 1'b0;
165,195d110
<       else if(r_wait_to_read || r_wait_to_rd_after_wr & i_miss_resp) begin
<         r_wait_to_read        <= 'b0;
<         r_wait_to_rd_after_wr <= 'b0;
<         
<         o_cache_rvalid        <= '0;
<         o_miss_rden           <= 1'b1;
<         // if(r_vic == 1'd0)
<         //   r_tag_addr[0]       <= i_cache_addr[5+:16];
<         // else
<         //   r_tag_addr[1]       <= i_cache_addr[5+:16];
<       end
<       else if(i_cache_wren == 1'b1 || r_re_wren == 1'b1) begin
<         // r_vic                 <= (|w_hit)? w_hit[0]: r_vic;
<         if(|w_hit) begin
<           o_cache_rvalid      <= {RDEN_WIDTH{1'b1}};
<           r_cache_rdata       <= {2{w_hit_data[i_cache_addr[2+:3]]}};
<           for(integer idx=0; idx<`NUM_CACHE; idx=idx+1)
<             if(w_hit[idx]) begin
<               r_tag_dirty[idx]  <= 1'b1;
<               for(integer i=0; i<8; i++) begin
<                 if(i== i_cache_addr[2+:3])
<                   r_cached_data[idx][i] <= ({{8{i_cache_wstrb[3]}},{8{i_cache_wstrb[2]}},
<                                             {8{i_cache_wstrb[1]}},{8{i_cache_wstrb[0]}}} & i_cache_wdata) |
<                                           ({{8{~i_cache_wstrb[3]}},{8{~i_cache_wstrb[2]}},
<                                             {8{~i_cache_wstrb[1]}},{8{~i_cache_wstrb[0]}}} & r_cached_data[idx][i]);
<               end
<             end
<         end
<         else begin
<           o_cache_rvalid      <= 'b0;
<           r_temp_rdwr         <= 1'b0;
197,224c112,113
<           o_miss_wren         <= w_miss_tag_dirty;
<           o_miss_addr         <= w_miss_tag_dirty? {16'b0,w_miss_tag_addr}: {5'b0,i_cache_addr[31:5]};
<           o_miss_rden         <= ~w_miss_tag_dirty;
<           r_wait_to_read      <= w_miss_tag_dirty;
<           for(integer i=0; i<`NUM_CACHE; i=i+1)
<             if(r_vic[i]) begin
<               // r_tag_addr[i]   <= i_cache_addr[5+:16];
<               r_tag_dirty[i]  <= 1'b0;
<             end
<         end
<       end
<       else begin
<         //* write back while ram port is free;
<         if(~o_wb_wren) begin
<           o_wb_wren           <= l_wait_wb;
<           o_miss_addr         <= l_wb_addr;
<         end
<         if(~l_wait_wb) begin
<           r_to_wb             <= {r_to_wb[`NUM_CACHE-2:0],r_to_wb[`NUM_CACHE-1]};
<         end
<         if(i_wb_gnt) begin
<           for(integer i=0; i<`NUM_CACHE; i=i+1) begin
<             if(r_to_wb[i] == 1'b1) begin
<               r_tag_dirty[i]  <= '0;
<             end
<           end
<         end
<       end
---
>       if(i_flush | BYPASS | i_upd_valid)
>         o_cache_gnt           <= 1'b1;
235,238d123
<       `ifdef WRITE_AFTER_READ
<         r_re_rden             <= r_temp_rdwr;
<         r_re_wren             <= ~r_temp_rdwr;  
<       `else
240,242c125,126
<         r_cache_rdata         <= q_cache_addr[2]? {2{w_upd_rdata[q_cache_addr[2+:3]]}}:
<                                   {w_upd_rdata[q_cache_addr[2+:3]+1],w_upd_rdata[q_cache_addr[2+:3]]};
<       `endif
---
>         r_cache_rdata         <= q_cache_addr[2]? {2{i_upd_rdata[q_cache_addr[2+:3]]}}:
>                                   {i_upd_rdata[q_cache_addr[2+:3]+1],i_upd_rdata[q_cache_addr[2+:3]]};
245c129
<             r_cached_data[i]  <= w_upd_rdata;
---
>             r_cached_data[i]  <= i_upd_rdata;
247d130
<             r_tag_dirty[i]    <= ~r_temp_rdwr;
252,267c135,137
<     end
<   end
< 
<   always_comb begin
<     for(integer i=0; i<8; i++) begin
<     `ifndef WRITE_AFTER_READ
<       if(i== i_cache_addr[2+:3])
<         w_upd_rdata[i] = ({{8{q_cache_wstrb[3]}},{8{q_cache_wstrb[2]}},
<                           {8{q_cache_wstrb[1]}},{8{q_cache_wstrb[0]}}} & q_cache_wdata) |
<                          ({{8{~q_cache_wstrb[3]}},{8{~q_cache_wstrb[2]}},
<                           {8{~q_cache_wstrb[1]}},{8{~q_cache_wstrb[0]}}} & i_upd_rdata[i]);
<       else
<         w_upd_rdata[i] = i_upd_rdata[i];
<     `else
<         w_upd_rdata[i] = i_upd_rdata[i];
<     `endif
---
>       else if(i_wr_finish) begin
>         o_cache_rvalid        <= 1'b1;
>       end
274,275d143
<       q_cache_wdata   <= i_cache_wdata;
<       q_cache_wstrb   <= i_cache_wstrb;
278c146
<       q_cache_req     <= i_cache_rden | i_cache_wren;
---
>       q_cache_req     <= i_cache_rden;
291a160,461
> 
> 
> 
> // /*
> //  *  Project:            NanoCore -- a RISCV-32MC SoC.
> //  *  Module name:        NanoCache_Search.
> //  *  Description:        cache of nano core.
> //  *  Last updated date:  2024.9.1.
> //  *
> //  *  Communicate with Junnan Li <lijunnan@nudt.edu.cn>.
> //  *  Copyright (C) 2021-2024 NUDT.
> //  *
> //  *  Noted:
> //  *      1) cache for instruction
> //  */
> 
> // module NanoCache_Search #(
> //   parameter DATA_WIDTH = 32,
> //   parameter RDEN_WIDTH = 1,
> //   parameter BYPASS     = 1,
> // ) (
> //   //* clk & reset;
> //   input   wire                        i_clk,
> //   input   wire                        i_rst_n,
> //   input   wire                        i_flush,
> 
> //   //* interface for PEs;
> //   input   wire                        i_cache_rden,
> //   input   wire  [RDEN_WIDTH-1:0]      i_cache_rden_v,
> //   input   wire                        i_cache_wren,
> //   input   wire  [31:0]                i_cache_addr,
> //   input   wire  [31:0]                i_cache_wdata,
> //   input   wire  [ 3:0]                i_cache_wstrb,
> //   output  wire  [DATA_WIDTH-1:0]      o_cache_rdata,
> //   output  wire                        o_cache_rvalid_ns,
> //   output  reg   [RDEN_WIDTH-1:0]      o_cache_rvalid,
> //   output  wire                        o_cache_gnt,
> 
> //   //* interface for reading SRAM by cache;
> //   output  logic                       o_wb_wren,
> //   input   wire                        i_wb_gnt,
> //   output  logic                       o_miss_rden,
> //   output  logic                       o_miss_wren,
> //   output  logic [31:0]                o_miss_addr,
> //   output  logic [7:0][31:0]           o_miss_wdata,
> //   input   wire                        i_miss_resp,
> //   input   wire                        i_upd_valid,
> //   input   wire  [7:0][31:0]           i_upd_rdata
> // );
> //   //====================================================================//
> //   //*   internal reg/wire/param declarations
> //   //====================================================================//
> //   reg   [`NUM_CACHE-1:0][7:0][31:0]   r_cached_data;
> //   reg   [`NUM_CACHE-1:0]              r_tag_valid, r_tag_dirty;
> //   reg   [`NUM_CACHE-1:0]              r_vic, r_to_wb;
> //   reg   [`NUM_CACHE-1:0][15:0]        r_tag_addr;
> //   logic [`NUM_CACHE-1:0]              w_hit;
> //   logic [7:0][31:0]                   l_miss_wdata;
> //   logic [7:0][31:0]                   l_wb_wdata;
> //   logic [15:0]                        l_wb_addr;
> //   logic                               l_wait_wb;
> //   logic                               w_wb_gnt;
> //   reg                                 r_wb_wren;
> //   reg   [15:0]                        r_wb_addr;
> //   reg   [7:0][31:0]                   r_wb_wdata;
> //   reg                                 r_lock_gnt;
> //   reg                                 r_temp_rdwr;
> //   reg   [15:0]                        r_miss_addr;
> //   reg                                 r_cache_wren_delay;
> //   reg                                 r_wait_to_read, r_wait_to_rd_after_wr;
> //   reg                                 r_upd_valid_delay;
> //   logic [7:0][31:0]                   w_upd_rdata;
> //   reg   [31:0]                        q_cache_wdata, q_cache_addr;
> //   reg   [ 3:0]                        q_cache_wstrb;
> //   reg   [RDEN_WIDTH-1:0]              q_cache_rden;
> //   reg                                 q_cache_req;
> //   reg   [63:0]                        r_cache_rdata;
> //   //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//
> 
> //   //====================================================================//
> //   //*   Combine input signals
> //   //====================================================================//
> //   assign o_cache_rdata = r_cache_rdata[DATA_WIDTH-1:0]; 
> //   assign o_miss_wdata = o_wb_wren? r_wb_wdata: l_miss_wdata;
> //   always_comb begin
> //     l_miss_wdata        = '0;
> //     l_wb_wdata          = '0;
> //     l_wb_addr           = '0;
> //     l_wait_wb           = '0;
> //     for(integer i=0; i<`NUM_CACHE; i=i+1) begin
> //       l_miss_wdata      = l_miss_wdata | {256{r_vic[i]}} & r_cached_data[i];
> //       l_wb_wdata        = l_wb_wdata | {256{r_to_wb[i]}} & r_cached_data[i];
> //       l_wb_addr         = l_wb_addr | {16{r_to_wb[i]}} & r_tag_addr[i];
> //       l_wait_wb         = l_wait_wb | r_to_wb[i] & r_tag_dirty[i] & r_tag_valid[i];
> //       w_hit[i]          = r_tag_valid[i]==1'b1 && r_tag_addr[i] == i_cache_addr[5+:16];
> //     end
> //   end
> //   logic [7:0][31:0] w_hit_data;
> //   always_comb begin
> //     w_hit_data          = '0;
> //     for(integer i=0; i<`NUM_CACHE; i=i+1) begin
> //       w_hit_data        = w_hit_data | {256{w_hit[i]}} & r_cached_data[i];
> //     end
> //   end
> //   logic w_miss_tag_dirty;
> //   logic [15:0]  w_miss_tag_addr;
> //   always_comb begin
> //     w_miss_tag_dirty    = '0;
> //     w_miss_tag_addr     = '0;
> //     for(integer i=0; i<`NUM_CACHE; i=i+1) begin
> //       w_miss_tag_dirty  = w_miss_tag_dirty | r_vic[i] & r_tag_dirty[i];
> //       w_miss_tag_addr   = w_miss_tag_addr  | {16{r_vic[i]}} & r_tag_addr[i];
> //     end
> //   end
> //   reg r_miss_rden, r_miss_wren;
> //   // reg [7:0][31:0]  r_miss_wdata;
> //   assign o_cache_gnt    = ~(r_miss_rden|r_wait_to_read) & r_lock_gnt;
> //   assign o_cache_rvalid_ns = i_cache_rden & (|w_hit);
> 
> //   always_comb begin
> //     o_miss_rden         = 1'b0;
> //     w_wb_gnt            = 1'b0;
> //     o_miss_addr         = '0;
> //     o_miss_wren         = '0;
> //     o_wb_wren           = '0;
> //     if((i_cache_rden | i_cache_wren) == 1'b1 && w_hit == 0) begin
> //       o_miss_addr       = {5'b0,i_cache_addr[31:5]};
> //       o_miss_rden       = 1'b1;
> //     end
> //     else if(r_miss_wren) begin
> //       o_miss_addr       = r_miss_addr;
> //       o_miss_wren       = 1'b1;
> //     end
> //     else if(~i_cache_wren & ~r_cache_wren_delay)begin
> //       w_wb_gnt          = r_wb_wren;
> //       o_miss_addr       = r_wb_addr;
> //       o_wb_wren         = r_wb_wren;
> //     end
> //   end
> 
> //   always_ff @(posedge i_clk or negedge i_rst_n) begin
> //     r_cache_wren_delay        <= i_cache_wren;
> //     if (~i_rst_n) begin
> //       o_cache_rvalid          <= '0;
> //       r_miss_rden             <= '0;
> //       r_miss_wren             <= '0;
> //       r_wb_wren               <= '0;
> 
> //       r_tag_valid             <= '0;
> //       r_tag_dirty             <= '0;
> //       r_vic                   <= 1;
> //       r_to_wb                 <= 1;
> 
> //       r_lock_gnt              <= 1'b1;
> //       r_temp_rdwr             <= '0;
> //       r_wait_to_read          <= '0;
> //       r_wait_to_rd_after_wr   <= '0;
> //       r_upd_valid_delay       <= '0;
> //     end else begin
> //       // //* write back while ram port is free;
> //       // if(w_wb_gnt) begin
> //       //   r_to_wb               <= {r_to_wb[`NUM_CACHE-2:0],r_to_wb[`NUM_CACHE-1]};
> //       //   // if(o_wb_wren)
> //       //   for(integer i=0; i<`NUM_CACHE; i=i+1) begin
> //       //     if(r_to_wb[i] == 1'b1)
> //       //       r_tag_dirty[i]  <= '0;
> //       //   end
> //       // end
> //       r_wb_wren             <= l_wait_wb & ~r_wb_wren;
> //       r_wb_wdata            <= l_wb_wdata;
> //       r_wb_addr             <= l_wb_addr;
>       
> //       //* serach;
> //       r_upd_valid_delay       <= i_upd_valid;
> //       r_lock_gnt              <=  (r_upd_valid_delay|i_flush)? 1'b1: 
> //                                   (r_miss_rden|r_miss_wren)? 1'b0: r_lock_gnt;
> 
> //       o_cache_rvalid          <= '0;
> //       r_miss_rden             <= 1'b0;
> //       r_miss_wren             <= 1'b0;
> //       if(i_cache_rden == 1'b1) begin
> //         if(|w_hit) begin
> //           o_cache_rvalid      <= i_cache_rden_v;
> //           r_cache_rdata       <= i_cache_addr[2]? {2{w_hit_data[i_cache_addr[2+:3]]}}:
> //                     {w_hit_data[i_cache_addr[2+:3]+1],w_hit_data[i_cache_addr[2+:3]]};
> //         end
> //         else begin
> //           o_cache_rvalid      <= '0;
> //           r_temp_rdwr         <= 1'b1;  //* used to update tag_dirty;
> //           r_miss_rden         <= 1'b1;
> //           r_miss_wren         <= w_miss_tag_dirty;
> //           r_miss_addr         <= {16'b0,w_miss_tag_addr};
> //           for(integer i=0; i<`NUM_CACHE; i=i+1)
> //             if(r_vic[i]) begin
> //               r_tag_dirty[i]  <= 1'b0;
> //             end
> //         end
> //       end
> //       // else if(r_wait_to_read || r_wait_to_rd_after_wr) begin
> //       //   r_wait_to_read        <= 'b0;
> //       //   r_wait_to_rd_after_wr <= 'b0;
> //       //   o_cache_rvalid        <= '0;
> //       //   r_miss_rden           <= 1'b1;
> //       // end
> //       else if(i_cache_wren == 1'b1) begin
> //         if(|w_hit) begin
> //           o_cache_rvalid      <= {RDEN_WIDTH{1'b1}};
> //           r_cache_rdata       <= {2{w_hit_data[i_cache_addr[2+:3]]}};
> //           for(integer idx=0; idx<`NUM_CACHE; idx=idx+1)
> //             if(w_hit[idx]) begin
> //               r_tag_dirty[idx]  <= 1'b1;
> //               for(integer i=0; i<8; i++) begin
> //                 if(i== i_cache_addr[2+:3])
> //                   r_cached_data[idx][i] <= ({{8{i_cache_wstrb[3]}},{8{i_cache_wstrb[2]}},
> //                                              {8{i_cache_wstrb[1]}},{8{i_cache_wstrb[0]}}} & i_cache_wdata) |
> //                                            ({{8{~i_cache_wstrb[3]}},{8{~i_cache_wstrb[2]}},
> //                                              {8{~i_cache_wstrb[1]}},{8{~i_cache_wstrb[0]}}} & r_cached_data[idx][i]);
> //               end
> //             end
> //         end
> //         else begin
> //           o_cache_rvalid      <= 'b0;
> //           r_temp_rdwr         <= 1'b0;
> //           r_miss_rden         <= 1'b1;
> //           r_miss_wren         <= w_miss_tag_dirty;
> //           r_miss_addr         <= {16'b0,w_miss_tag_addr};
> //           for(integer i=0; i<`NUM_CACHE; i=i+1)
> //             if(r_vic[i]) begin
> //               r_tag_dirty[i]  <= 1'b0;
> //             end
> //         end
> //       end
> //       else begin
> //         if(~l_wait_wb)
> //           r_to_wb             <= {r_to_wb[`NUM_CACHE-2:0],r_to_wb[`NUM_CACHE-1]};
> //         if(w_wb_gnt) begin
> //           r_to_wb             <= {r_to_wb[`NUM_CACHE-2:0],r_to_wb[`NUM_CACHE-1]};
> //           for(integer i=0; i<`NUM_CACHE; i=i+1) begin
> //             if(r_to_wb[i] == 1'b1)
> //               r_tag_dirty[i]  <= '0;
> //           end
> //         end
> //       end
> 
>     
> //       //* meet flush
> //       if(i_flush & (i_cache_rden | ~o_cache_gnt & q_cache_req)) begin
> //         o_cache_rvalid        <= i_cache_rden? i_cache_rden_v: q_cache_rden;
> //       end
> 
> //       //* update
> //       if(i_upd_valid & q_cache_req & ~i_flush) begin
> //         // r_tag_addr          <= r_temp_addr; TODO,
> //         r_vic                 <= {r_vic[`NUM_CACHE-2:0],r_vic[`NUM_CACHE-1]};
> //         o_cache_rvalid        <= q_cache_rden;
> //         r_cache_rdata         <= q_cache_addr[2]? {2{i_upd_rdata[q_cache_addr[2+:3]]}}:
> //                                   {i_upd_rdata[q_cache_addr[2+:3]+1],i_upd_rdata[q_cache_addr[2+:3]]};
> //         for(integer i=0; i<`NUM_CACHE; i=i+1) begin
> //           if(r_vic[i] == 1'b1) begin
> //             r_cached_data[i]  <= w_upd_rdata;
> //             r_tag_valid[i]    <= 1'b1;
> //             r_tag_dirty[i]    <= ~r_temp_rdwr;
> //             r_tag_addr[i]     <= q_cache_addr[5+:16];
> //           end
> //         end
> //       end
> //     end
> //   end
> 
> //   always_comb begin
> //     for(integer i=0; i<8; i++) begin
> //       if(i== i_cache_addr[2+:3])
> //         w_upd_rdata[i] = ({{8{q_cache_wstrb[3]}},{8{q_cache_wstrb[2]}},
> //                           {8{q_cache_wstrb[1]}},{8{q_cache_wstrb[0]}}} & q_cache_wdata) |
> //                          ({{8{~q_cache_wstrb[3]}},{8{~q_cache_wstrb[2]}},
> //                           {8{~q_cache_wstrb[1]}},{8{~q_cache_wstrb[0]}}} & i_upd_rdata[i]);
> //       else
> //         w_upd_rdata[i] = i_upd_rdata[i];
> //     end
> //   end
> 
> //   always_ff @(posedge i_clk) begin
> //     q_cache_req       <= i_upd_valid? '0: ~i_flush &  q_cache_req;
> //     if(o_cache_gnt) begin
> //       q_cache_wdata   <= i_cache_wdata;
> //       q_cache_wstrb   <= i_cache_wstrb;
> //       q_cache_addr    <= i_cache_addr;
> //       q_cache_rden    <= i_cache_rden_v | {RDEN_WIDTH{i_cache_wren}};
> //       q_cache_req     <= i_cache_rden | i_cache_wren;
> //     end
> //   end
> 
> //   //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//
> 
> //   //* assert
> //   // initial begin
> //   //   assert (w_hit == 4'b0000 || w_hit == 4'b0001 || w_hit == 4'b0010 || w_hit == 4'b0100 || w_hit == 4'b1000 )
> //   //     else
> //   //       $error("w_hit in iCache: %x", w_hit);
> //   // end
> 
> // endmodule
\ No newline at end of file
Only in src/mem_part/Cache: NanoCache_Top.sv
Only in src/mem_part/Cache: NanoCache_Update_1PE.sv
diff '--color=auto' -r src/mem_part/Cache/NanoCache_Update.sv /home/lijunnan/Documents/0-code/0-hw/ku040/pipelined-picorv32_ku040/pipelined-picorv32_ku040.srcs/sources_1/imports/rtl/mem_part/Cache/NanoCache_Update.sv
5c5
<  *  Last updated date:  2024.2.21.
---
>  *  Last updated date:  2024.9.1.
13c13,15
< module NanoCache_Update (
---
> module NanoCache_Update #(
>   parameter                  BUFFER = 1
> )(
15,25c17,26
<   input   wire                            i_clk,
<   input   wire                            i_rst_n,
<   input   wire  [`NUM_PE-1:0]             i_flush,
< 
<   input   wire  [`NUM_PE-1:0]             i_miss_rden,
<   input   wire  [`NUM_PE-1:0]             i_miss_wren,
<   input   wire  [`NUM_PE-1:0][31:0]       i_miss_addr,
<   input   wire  [`NUM_PE-1:0][7:0][31:0]  i_miss_wdata,
<   output  wire  [`NUM_PE-1:0]             o_miss_resp,
<   input   wire  [`NUM_PE-1:0]             i_wb_wren,
<   output  wire  [`NUM_PE-1:0]             o_wb_gnt,
---
>   input   wire               i_clk,
>   input   wire               i_rst_n,
>   input   wire               i_flush,
> 
>   input   wire               i_miss_rden,
>   input   wire               i_miss_wren,
>   input   wire  [31:0]       i_miss_addr,
>   input   wire  [7:0][31:0]  i_miss_wdata,
>   input   wire  [7:0][ 3:0]  i_miss_wstrb,
>   output  wire               o_miss_resp,
28,37c29,40
<   output  reg                             o_mm_rden,
<   output  reg                             o_mm_wren,
<   output  reg   [7:0][31:0]               o_mm_wdata,
<   output  reg   [31:0]                    o_mm_addr,
<   input   wire                            i_mm_gnt,
<   input   wire  [7:0][31:0]               i_mm_rdata,
<   input   wire                            i_mm_rvalid,
< 
<   output  wire  [`NUM_PE-1:0]             o_upd_valid,
<   output  wire  [7:0][31:0]               o_upd_rdata
---
>   output  wire                o_mm_rden,
>   output  wire                o_mm_wren,
>   output  wire  [7:0][31:0]   o_mm_wdata,
>   output  wire  [7:0][ 3:0]   o_mm_wstrb,
>   output  wire  [31:0]        o_mm_addr,
>   input   wire                i_mm_gnt,
>   input   wire  [7:0][31:0]   i_mm_rdata,
>   input   wire                i_mm_rvalid,
> 
>   output  wire                o_upd_valid,
>   output  wire  [7:0][31:0]   o_upd_rdata,
>   output  wire                o_wr_finish
42,43c45
<   wire  [3:0]                         w_req_mem, w_miss_resp, w_wbreq_mem, w_wb_gnt;
<   reg   [3:0][`NUM_PE-1:0]            r_tag_read;
---
>   reg   [1:0]                 r_tag_read, r_tag_write;
49,80c51,59
<   generate if(`NUM_PE < 4)
<     assign w_req_mem[3:`NUM_PE] = 'b0;
<     assign w_wbreq_mem[3:`NUM_PE] = 'b0;
<   endgenerate
<   assign w_req_mem[`NUM_PE-1:0] = (i_miss_rden | i_miss_wren);
<   assign w_wbreq_mem[`NUM_PE-1:0] = i_wb_wren;
< 
<   assign w_miss_resp = w_req_mem[0]? 4'b1:
<                         w_req_mem[1]? 4'b10:
<                         w_req_mem[2]? 4'b100:
<                         w_req_mem[3]? 4'b1000: 4'b0;
<   assign w_wb_gnt    = (|w_req_mem[3:0])? 4'b0:
<                         w_wbreq_mem[0]? 4'b1:
<                         w_wbreq_mem[1]? 4'b10:
<                         w_wbreq_mem[2]? 4'b100:
<                         w_wbreq_mem[3]? 4'b1000: 4'b0;
<   assign o_miss_resp = w_miss_resp[`NUM_PE-1:0];
<   assign o_wb_gnt    = w_wb_gnt[`NUM_PE-1:0];
<   assign o_upd_valid = r_tag_read[1];
<   assign o_upd_rdata = i_mm_rdata;
< 
<   always_comb begin
<     o_mm_wren = |(w_miss_resp[`NUM_PE-1:0] & i_miss_wren | w_wb_gnt[`NUM_PE-1:0] & i_wb_wren);
<     o_mm_rden = |(w_miss_resp[`NUM_PE-1:0] & i_miss_rden);
<     o_mm_wdata= 'b0;
<     o_mm_addr = 'b0;
<     for(integer macro_i=0; macro_i<`NUM_PE; macro_i=macro_i+1)
<       if(w_miss_resp[macro_i] == 1 || w_wb_gnt[macro_i] == 1) begin
<         o_mm_wdata = o_mm_wdata | i_miss_wdata;
<         o_mm_addr  = o_mm_addr  | i_miss_addr;
<       end
<   end
---
>   assign o_miss_resp  = i_miss_rden | i_miss_wren;
>   assign o_upd_valid  = BUFFER? r_tag_read[1]: r_tag_read[0];
>   assign o_wr_finish  = BUFFER? r_tag_write[1]: r_tag_write[0];
>   assign o_upd_rdata  = i_mm_rdata;
>   assign o_mm_wren    = i_miss_wren;
>   assign o_mm_rden    = i_miss_rden;
>   assign o_mm_wdata   = i_miss_wdata;
>   assign o_mm_wstrb   = i_miss_wstrb;
>   assign o_mm_addr    = i_miss_addr; 
85,86c64,65
<       for(i=0; i<4; i=i+1)
<         r_tag_read[i]           <= 'b0;
---
>       r_tag_read                <= '0;
>       r_tag_write               <= '0;
88,90c67,69
<       r_tag_read[0]             <= w_miss_resp[`NUM_PE-1:0] & i_miss_rden[`NUM_PE-1:0] & ~i_flush;
<       for(i=1; i<4; i=i+1)
<         r_tag_read[i]           <= r_tag_read[i-1] & ~i_flush;
---
>       r_tag_read[0]             <= i_miss_rden & ~i_flush;
>       r_tag_read[1]             <= r_tag_read[0] & ~i_flush;
>       r_tag_write               <= {r_tag_write[0], i_miss_wren};
Only in src/mem_part: Memory_Top.sv
diff '--color=auto' -r src/mem_part/SRAM_Wrapper.sv /home/lijunnan/Documents/0-code/0-hw/ku040/pipelined-picorv32_ku040/pipelined-picorv32_ku040.srcs/sources_1/imports/rtl/mem_part/SRAM_Wrapper.sv
23d22
<       input         [ 3:0]  stra,
30d28
<       input         [ 3:0]  strb,
33,34d30
< genvar idx;  
< generate for(idx = 0; idx <4; idx=idx+1) begin: gen_8b_ram
37c33
<       ram_8_4096 mem(
---
>       ram_32_4096 mem(
39c35
<         .wea    (wea & stra[idx]    ),
---
>         .wea    (wea                ),
41,42c37,38
<         .dina   (dina[idx*8+:8]     ),
<         .douta  (douta[idx*8+:8]    ),
---
>         .dina   (dina               ),
>         .douta  (douta              ),
44c40
<         .web    (web & strb[idx]    ),
---
>         .web    (web                ),
46,47c42,43
<         .dinb   (dinb[idx*8+:8]     ),
<         .doutb  (doutb[idx*8+:8]    )
---
>         .dinb   (dinb               ),
>         .doutb  (doutb              )
54,55c50,51
<         .data_a     (dina[idx*8+:8] ),
<         .data_b     (dinb[idx*8+:8] ),
---
>         .data_a     (dina           ),
>         .data_b     (dinb           ),
58,61c54,57
<         .wren_a     (wea & stra[idx]),
<         .wren_b     (web & strb[idx]),
<         .q_a        (douta[idx*8+:8]),
<         .q_b        (doutb[idx*8+:8])
---
>         .wren_a     (wea            ),
>         .wren_b     (web            ),
>         .q_a        (douta          ),
>         .q_b        (doutb          )
63,64c59
<       defparam  mem.BUFFER= 1,
<                 mem.width = 8,
---
>       defparam  mem.width = 32,
70c65
<       ram_8_2048 mem(
---
>       ram_32_2048 mem(
72c67
<         .wea    (wea & stra[idx]    ),
---
>         .wea    (wea                ),
74,75c69,70
<         .dina   (dina[idx*8+:8]     ),
<         .douta  (douta[idx*8+:8]    ),
---
>         .dina   (dina               ),
>         .douta  (douta              ),
77c72
<         .web    (web & strb[idx]    ),
---
>         .web    (web                ),
79,80c74,75
<         .dinb   (dinb[idx*8+:8]     ),
<         .doutb  (doutb[idx*8+:8]    )
---
>         .dinb   (dinb               ),
>         .doutb  (doutb              )
87,88c82,83
<         .data_a     (dina[idx*8+:8] ),
<         .data_b     (dinb[idx*8+:8] ),
---
>         .data_a     (dina           ),
>         .data_b     (dinb           ),
91,94c86,89
<         .wren_a     (wea & stra[idx]),
<         .wren_b     (web & strb[idx]),
<         .q_a        (douta[idx*8+:8]),
<         .q_b        (doutb[idx*8+:8])
---
>         .wren_a     (wea            ),
>         .wren_b     (web            ),
>         .q_a        (douta          ),
>         .q_b        (doutb          )
96,97c91
<       defparam  mem.BUFFER= 1,
<                 mem.width = 8,
---
>       defparam  mem.width = 32,
103c97
<       ram_8_1024 mem(
---
>       ram_32_1024 mem(
105c99
<         .wea    (wea & stra[idx]    ),
---
>         .wea    (wea                ),
107,108c101,102
<         .dina   (dina[idx*8+:8]     ),
<         .douta  (douta[idx*8+:8]    ),
---
>         .dina   (dina               ),
>         .douta  (douta              ),
110c104
<         .web    (web & strb[idx]    ),
---
>         .web    (web                ),
112,113c106,107
<         .dinb   (dinb[idx*8+:8]     ),
<         .doutb  (doutb[idx*8+:8]    )
---
>         .dinb   (dinb               ),
>         .doutb  (doutb              )
120,121c114,115
<         .data_a     (dina[idx*8+:8] ),
<         .data_b     (dinb[idx*8+:8] ),
---
>         .data_a     (dina           ),
>         .data_b     (dinb           ),
124,127c118,121
<         .wren_a     (wea & stra[idx]),
<         .wren_b     (web & strb[idx]),
<         .q_a        (douta[idx*8+:8]),
<         .q_b        (doutb[idx*8+:8])
---
>         .wren_a     (wea            ),
>         .wren_b     (web            ),
>         .q_a        (douta          ),
>         .q_b        (doutb          )
129,130c123
<       defparam  mem.BUFFER= 1,
<                 mem.width = 8,
---
>       defparam  mem.width = 32,
135,136d127
<   end
< endgenerate
Only in src/peripherals_part/pkt_part/dma_part: DMA_Dispatch.v
diff '--color=auto' -r src/peripherals_part/pkt_part/dma_part/DMA_Engine.sv /home/lijunnan/Documents/0-code/0-hw/ku040/pipelined-picorv32_ku040/pipelined-picorv32_ku040.srcs/sources_1/imports/rtl/peripherals_part/pkt_part/dma_part/DMA_Engine.sv
18c18
<   ,(* mark_debug = "true"*)input  wire  [         133:0]  i_data
---
>   ,input  wire  [         133:0]  i_data
34,40c34,40
<   ,input  wire  [ 31:0]     i_peri_addr
<   ,input  wire              i_peri_wren
<   ,input  wire              i_peri_rden
<   ,input  wire  [ 31:0]     i_peri_wdata
<   ,output wire  [ 31:0]     o_peri_rdata
<   ,output wire              o_peri_ready
<   ,output wire              o_peri_int
---
>   ,(* mark_debug = "true"*)input  wire  [ 31:0]     i_peri_addr
>   ,(* mark_debug = "true"*)input  wire              i_peri_wren
>   ,(* mark_debug = "true"*)input  wire              i_peri_rden
>   ,(* mark_debug = "true"*)input  wire  [ 31:0]     i_peri_wdata
>   ,(* mark_debug = "true"*)output wire  [ 31:0]     o_peri_rdata
>   ,(* mark_debug = "true"*)output wire              o_peri_ready
>   ,(* mark_debug = "true"*)output wire              o_peri_int
Only in src/peripherals_part/pkt_part/dma_part: DMA_Out_Data.v
diff '--color=auto' -r src/peripherals_part/pkt_part/dma_part/DMA_Peri.v /home/lijunnan/Documents/0-code/0-hw/ku040/pipelined-picorv32_ku040/pipelined-picorv32_ku040.srcs/sources_1/imports/rtl/peripherals_part/pkt_part/dma_part/DMA_Peri.v
44,46c44,46
<   ,(* mark_debug = "true"*)output reg               o_rden_length
<   ,(* mark_debug = "true"*)input  wire  [15:0]      i_dout_length
<   ,(* mark_debug = "true"*)input  wire              i_empty_length
---
>   ,output reg               o_rden_length
>   ,input  wire  [15:0]      i_dout_length
>   ,input  wire              i_empty_length
Only in src/peripherals_part/pkt_part: dra_part
diff '--color=auto' -r src/peripherals_part/pkt_part/Pkt_TCP_CRC.sv /home/lijunnan/Documents/0-code/0-hw/ku040/pipelined-picorv32_ku040/pipelined-picorv32_ku040.srcs/sources_1/imports/rtl/peripherals_part/pkt_part/Pkt_TCP_CRC.sv
18,19c18,19
<   ,input  wire              i_data_valid
<   ,input  wire  [133:0]     i_data
---
>   ,(* mark_debug = "true"*)input  wire              i_data_valid
>   ,(* mark_debug = "true"*)input  wire  [133:0]     i_data
36,37c36,37
<   reg   [16:0]              din_crc;
<   reg                       rden_crc, wren_crc;
---
>   (* mark_debug = "true"*)reg   [16:0]              din_crc;
>   (* mark_debug = "true"*)reg                       rden_crc, wren_crc;
42c42
<   reg                       tag_to_calc_crc;
---
>   (* mark_debug = "true"*)reg                       tag_to_calc_crc;
50c50
<   state_t state_calc, state_out;
---
>   (* mark_debug = "true"*)state_t state_calc, state_out;
Only in src/: runtime_part
Only in src/: RvPipe_SoC.v
Only in src/: sim_rtl
