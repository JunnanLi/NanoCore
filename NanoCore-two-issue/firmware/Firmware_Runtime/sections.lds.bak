/*
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.
*/
OUTPUT_ARCH(riscv)
ENTRY(_start)

MEMORY {
	/* the memory in the testbench is 64k in size;
	 * set LENGTH=48k and leave at least 16k for stack */
	/* mem : ORIGIN = 0x00000000, LENGTH = 0x0000c000	*/
	/* the memory in the testbench is 16k in size;
	 * set LENGTH=12k and leave at least 4k for stack */
	ram (rwxai) : ORIGIN = 0x0, LENGTH = 0x20000
	ram_data (rwxai) : ORIGIN = 0x20000, LENGTH = 0x20000
}

SECTIONS {
	/* we want a fixed entry point */
 	PROVIDE(__boot_address = 0x180);

	/* stack and heap related settings */
	__stack_size = DEFINED(__stack_size) ? __stack_size : 0x1000;
	/* data related settings */
	__data_start = DEFINED(__data_start) ? __data_start : 0x0000b000;


	/* interrupt vectors */
	.vectors (ORIGIN(ram)) :
	{
		PROVIDE(__vector_start = .);
    	KEEP(*(.vectors));
	} > ram
	

	/* crt0 init code */
	.init (__boot_address) :
	{
		KEEP (*(SORT_NONE(.init)))
		KEEP (*(.text.start))
	} > ram
	

	/* the bulk of the program: main, libc, functions etc. */
	.text           :
	{
		*(.text.unlikely .text.*_unlikely .text.unlikely.*)
		*(.text.exit .text.exit.*)
		*(.text.startup .text.startup.*)
		*(.text.hot .text.hot.*)
		*(.text .stub .text.* .gnu.linkonce.t.*)
		/* .gnu.warning sections are handled specially by elf32.em.  */
		*(.gnu.warning)
	} >ram


	/* read-only sections */
	.rodata         :
	{
		*(.rodata .rodata.* .gnu.linkonce.r.*)
	} >ram_data
	.rodata1        :
	{
		*(.rodata1)
	} >ram_data

	/* Adjust the address for the data segment.  We want to adjust up to
	 the same address within the page on the next page up.  */
	. = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));

	/* data sections for initalized data */
	.data           :
	{
		__DATA_BEGIN__ = .;
		*(.data .data.* .gnu.linkonce.d.*)
		SORT(CONSTRUCTORS)
	} >ram_data


	/* We want the small data sections together, so single-instruction offsets
	 can access them all, and initialized data all before uninitialized, so
	 we can shorten the on-disk segment size.  */
	.sdata          :
	{
		__SDATA_BEGIN__ = .;
		*(.srodata.cst16) *(.srodata.cst8) *(.srodata.cst4) *(.srodata.cst2) *(.srodata .srodata.*)
		*(.sdata .sdata.* .gnu.linkonce.s.*)
	} >ram_data
	_edata = .; PROVIDE (edata = .);
	. = .;


	/* zero initialized sections */
	__bss_start = .;
	.sbss           :
	{
		*(.dynsbss)
		*(.sbss .sbss.* .gnu.linkonce.sb.*)
		*(.scommon)
	} >ram_data
	.bss            :
	{
		*(.dynbss)
		*(.bss .bss.* .gnu.linkonce.b.*)
		*(COMMON)
		/* Align here to ensure that the .bss section occupies space up to
		  _end.  Align after .bss to ensure correct alignment even if the
		  .bss section disappears because there are no input sections.
		  FIXME: Why do we need it? When there is no .bss section, we don't
		  pad the .data section.  */
		. = ALIGN(. != 0 ? 32 / 8 : 1);
	} >ram_data
	. = ALIGN(32 / 8);
	. = SEGMENT_START("ldata-segment", .);
	. = ALIGN(32 / 8);
	__BSS_END__ = .;
	__bss_end = .;

	/* The compiler uses this to access data in the .sdata, .data, .sbss and .bss
	 sections with fewer instructions (relaxation). This reduces code size. */
	__global_pointer$ = MIN(__SDATA_BEGIN__ + 0x800,
		    MAX(__DATA_BEGIN__ + 0x800, __BSS_END__ - 0x800));
	_end = .; PROVIDE (end = .);
	. = DATA_SEGMENT_END (.);


	/* heap: we should consider putting this to the bottom of the address space */
	/*.heap          :
	{
		PROVIDE(__heap_start = .);
		. = __heap_size;
		PROVIDE(__heap_end = .);
	} >ram_data*/


	/* stack: we should consider putting this further to the top of the address
	space */
	.stack         : ALIGN(16) /* this is a requirement of the ABI(?) */
	{
		PROVIDE(__stack_start = .);
		. = __stack_size;
		PROVIDE(_sp = .);
		PROVIDE(__stack_end = .);
	} >ram_data
}

/* instr and data are in the same RAM;
// /*
// This is free and unencumbered software released into the public domain.

// Anyone is free to copy, modify, publish, use, compile, sell, or
// distribute this software, either in source code form or as a compiled
// binary, for any purpose, commercial or non-commercial, and by any
// means.
// */
// OUTPUT_ARCH(riscv)
// ENTRY(_start)

// MEMORY {
// 	/* the memory in the testbench is 64k in size;
// 	 * set LENGTH=48k and leave at least 16k for stack */
// 	/* mem : ORIGIN = 0x00000000, LENGTH = 0x0000c000	*/
// 	/* the memory in the testbench is 16k in size;
// 	 * set LENGTH=12k and leave at least 4k for stack */
// 	mem : ORIGIN = 0x00000000, LENGTH = 0x0010000
// }

// SECTIONS {
// 	/* we want a fixed entry point */
//  	PROVIDE(__boot_address = 0x180);

// 	/* stack and heap related settings */
// 	__stack_size = DEFINED(__stack_size) ? __stack_size : 0x1000;
// 	/* data related settings */
// 	__data_start = DEFINED(__data_start) ? __data_start : 0x0000b000;


// 	/* interrupt vectors */
// 	.vectors (ORIGIN(mem)) :
// 	{
// 		PROVIDE(__vector_start = .);
//     	KEEP(*(.vectors));
// 	} > mem
	

// 	/* crt0 init code */
// 	.init (__boot_address) :
// 	{
// 		KEEP (*(SORT_NONE(.init)))
// 		KEEP (*(.text.start))
// 	} > mem
	
// 	.text :
// 	{
// 		*(.text.*);
// 		*(.text);
// 	} > mem

// 	.stack (__data_start) :
// 	{
// 		. = __stack_size;
// 		PROVIDE(_sp = .);
// 	} > mem

// 	.data : 
// 	{
// 		*(*);
// 		end = .;
// 		. = ALIGN(4);
// 	} > mem
// }
*/